#!/bin/sh

export PYTHON="python3"
export VENV="_python"
export NODEENV="_node"
export PATH="$PWD/$VENV/bin:$PWD/$NODEENV/bin:$PATH"
export PREFIX="./_site"

export GIT_REMOTE="origin"
export MASTER_BRANCH_REMOTE="master"
export PAGES_BRANCH_LOCAL="gh-pages"
export PAGES_BRANCH_REMOTE="gh-pages"

# Specified version must have builds for musl libc at
# https://unofficial-builds.nodejs.org/download/release/
NODE_VERSION="14.2.0"

venv_setup() { # filename [force | silent]
    MD5_FILE="$VENV/$1.md5"

    if [ "_$2" = '_force' ] && [ -e "$MD5_FILE" ]; then
        rm "$MD5_FILE"
    fi

    if [ ! -d "$VENV" ]; then
        $PYTHON -m venv "$VENV" || exit 1
    fi

    if [ -e "$MD5_FILE" ] && md5sum -c "$MD5_FILE" > /dev/null 2>&1; then
        [ "_$2" != "_silent" ] && echo "Skipping full virtual environment update (no changes in $1)"
        if grep -q '# dynamic$' "$1"; then
            awk '/# dynamic$/{print $1}' "$1" |
                xargs $PYTHON -m pip install -U | \
                grep -v "skipping upgrade"
        fi
        return 0
    fi

    $PYTHON -m pip install -U -r "$1" | grep -v "skipping upgrade" || exit 1

    md5sum "$1" > "$MD5_FILE"
}

node_setup() { # [force | silent]
    MD5_FILE="$NODEENV/package.json.md5"

    if [ "_$2" = '_force' ] && [ -e "$MD5_FILE" ]; then
        rm "$MD5_FILE"
    fi

    if [ ! -d "$NODEENV" ] || [ "$(node -v)" != "v$NODE_VERSION" ]; then
        nodeenv --force -n "$NODE_VERSION" "$NODEENV" || exit 1
    fi

    if [ -e "$MD5_FILE" ] && md5sum -c "$MD5_FILE" > /dev/null 2>&1; then
        [ "_$2" != "_silent" ] && echo "Skipping virtual environment update (no changes in package.json)"
        return 0
    fi

    npm install || exit 1

    md5sum "package.json" "package-lock.json" > "$MD5_FILE"
}

get_worktrees() { # returns: prefix, remote, branch, local_branch
    echo "$PREFIX" "$GIT_REMOTE" "$PAGES_BRANCH_REMOTE" "$PAGES_BRANCH_LOCAL"
    jq -r '.repos.chats | keys | "\(.[])"' data/config.json | while read year; do
        remote=$(jq -r ".repos.chats[\"$year\"].remote" data/config.json)
        branch=$(jq -r ".repos.chats[\"$year\"].branch" data/config.json)
        echo "$PREFIX/chats/$year" "$remote" "$branch" "$remote-$branch"
    done
}

is_worktree() { # prefix
    [ -d "$1" ] && git worktree list | grep -q "$(realpath $1)"
}

new_worktree() { # prefix ref branch [force]
    if [ "_$4" = '_force' ] || [ ! -e "$1" ]; then
        rm -rf "$1"
    fi

    git worktree prune
    mkdir -p "$1"

    if ! is_worktree "$1"; then
        git worktree add "$1" "$2" || exit 1
    fi

    (
        cd "$1"
        git reset -q --hard "$2"
        git clean -q -d -f
        git checkout -q -B "$3"
        git branch -q --set-upstream-to="$2" "$3"
    )
}

if [ ! -d "$VENV" ] && [ "_$1" != "_venv" ]; then
    echo "Setting up Python virtual environment: $VENV"
    venv_setup requirements.txt
fi

if [ ! -d "$NODEENV" ] && [ "_$1" != "_venv" ]; then
    echo "Setting up Node.js virtual environment: $VENV"
    node_setup
fi

case $1 in
    venv)
        case $2 in
            update)
                venv_setup requirements.txt $3
                if [ -e "$VENV/cli-requirements.txt.md5" ]; then
                    venv_setup cli-requirements.txt $3
                fi
                node_setup ;;
            remove) rm -rf "$VENV" "$NODEENV" "node_modules" ;;
            *) echo "Usage: $0 $1 update|remove" ;;
        esac ;;
    pages)
        case $2 in
            fetch)
                echo "Fetching updates for $PREFIX"

                jq -r '.repos.remotes[] | "\(.name) \(.pull) \(.push)"' data/config.json | while read name pull push; do
                    git remote add "$name" "$pull" 2>/dev/null || git remote set-url "$name" "$pull"
                    git remote set-url --push "$name" "$push"
                done

                get_worktrees | awk '{print $2 " " $3}' | xargs -n2 -P8 git fetch -q ;;
            checkout)
                get_worktrees | while read prefix remote branch local_branch; do
                    echo "Updating $prefix"
                    new_worktree "$prefix" "$remote/$branch" "$local_branch" "$3"
                done ;;
            pull)
                ./bsu pages fetch
                ./bsu pages checkout ;;
            commit)
                if [ -e "$PREFIX/.DEBUG" ]; then
                    echo "Error: The site was generated with debug mode enabled."
                    echo "Please rebuild it with './bsu build' before committing."
                    exit 1
                fi

                get_worktrees | while read prefix remote branch local_branch; do (
                    cd "$prefix"
                    git add .
                    git commit -m "Jenkins: Обновление статичных файлов" || true
                ) done ;;
            push)
                get_worktrees | \
                    awk '{print $2 " " $4}' | \
                    xargs -n2 -P8 git -c push.default=upstream push ;;
            *) echo "Usage: $0 $1 fetch|checkout|commit|pull|push" ;;
        esac ;;
    pull)
        if [ "$(git status --porcelain=v1 | wc -l)" -eq 0 ]; then
            echo "Updating ./"
            git pull -q --rebase "$GIT_REMOTE" "$MASTER_BRANCH_REMOTE"
        else
            echo "Not updating master due to uncommitted changes"
        fi

        ./bsu pages pull ;;
    build) shift; $PYTHON -m src.utils.generate $@ ;;
    serve) shift; $PYTHON -m src.utils.serve $@ ;;
    debug) shift; DEBUG=1 $PYTHON -m src.utils.serve $@ ;;
    react)
        DEBUG=1 ./bsu build --no-webpack
        DEBUG=1 npx webpack-dev-server --config src/js/webpack.config.js ;;
    download-chats) $PYTHON -m src.utils.chats ;;
    sh|bash) "$@" ;;
    cli)
        shift
        venv_setup cli-requirements.txt silent
        $PYTHON -m src.utils.cli $@ ;;
    repl) $PYTHON -i -m src.utils.repl ;;
    script) shift; $PYTHON -m src.scripts.$@ ;;
    python) shift; $PYTHON $@ ;;
    pip) shift; $PYTHON -m pip $@ ;;
    npm) shift; npm $@ ;;
    node) shift; node $@ ;;
    *) echo "Usage: $0 venv|pages|pull|build|serve|react|download-chats|sh|bash|repl|script|python|pip|node|npm" ;;
esac
